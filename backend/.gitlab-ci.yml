stages:
    - build
    - test
    - release

include:
    - template: Security/SAST.gitlab-ci.yml

build-code-job:
    stage: build
    image: docker:stable-dind
    variables:
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_CERTDIR: "/certs"
        DOCKER_TLS_VERIFY: 1
        DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    services:
      - docker:dind
    before_script:
      - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    script:
      - cd backend 
      - docker build --build-arg APP_VERSION=${VERSION} -t ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}-backend:${CI_COMMIT_REF_SLUG} .
      - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}-backend:${CI_COMMIT_REF_SLUG}

sast:
  stage: test
  variables:
    SAST_DEFAULT_ANALYZERS: eslint,semgrep,spotbugs
    SAST_EXCLUDED_ANALYZERS: "nodejs-scan"

sonarqube-check-backend:
    stage: test
    image:
      name: sonarsource/sonar-scanner-cli:latest
      entrypoint: [""]
    variables:
      SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
      GIT_DEPTH: "0"
    cache:
      key: "${CI_JOB_NAME}"
      paths:
        - .sonar/cache
    script:
      - echo "SonarQube test backend for ${CI_PROJECT_DIR}"
      - sonar-scanner
        -Dsonar.qualitygate.wait=true
        -Dsonar.projectKey=${SONAR_PROJECTKEY_BACKEND}
        -Dsonar.sources=.
        -Dsonar.host.url=${SONAR_HOST_URL}
        -Dsonar.login=${SONAR_LOGIN}
        -Dsonar.projectBaseDir="${CI_PROJECT_DIR}"/backend
        -Dsonar.java.binaries=**/*
        -Dsonar.language=java
    allow_failure: true
    only:
      - merge_requests
      - master
      - develop

upload-release:
    stage: release
    image: docker:stable-dind
    variables:
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_CERTDIR: "/certs"
        DOCKER_TLS_VERIFY: 1
        DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    services:
      - docker:dind
    script:
    before_script:
      - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    script:
      - docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}-backend:${CI_COMMIT_REF_SLUG}
      - docker tag ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}-backend:${CI_COMMIT_REF_SLUG}
                   ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}-backend:latest
      - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}-backend:latest
    after_script:
      - docker logout ${CI_REGISTRY}
##