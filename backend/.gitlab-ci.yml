stages:
    - build
    - test
    - release
    - deploy
    - rollback

include:
    - template: Security/SAST.gitlab-ci.yml

build-code-job:
    stage: build
    script:
      - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта  
      - cd backend 
      - mvn package -Dversion.application=${VERSION} # запуск сборки кода
      - cd ..
      - mkdir sausage-store-${VERSION} # создание директории, в которую копируются артефакты. Это нужно для организации удобной структуры архива
      - mv backend/target/sausage-store-${VERSION}.jar sausage-store-${VERSION}/sausage-store-${VERSION}.jar # копирование собранного бэкенда
    artifacts:
      paths:
        - sausage-store-${VERSION}/sausage-store-${VERSION}.jar # сохранение собранного бэкенда как артефакт
      reports:
        dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт

sast:
  stage: test
  variables:
    SAST_DEFAULT_ANALYZERS: eslint,semgrep,spotbugs
    SAST_EXCLUDED_ANALYZERS: "nodejs-scan"

sonarqube-check-backend:
    stage: test
    image:
      name: sonarsource/sonar-scanner-cli:latest
      entrypoint: [""]
    variables:
      SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
      GIT_DEPTH: "0"
    cache:
      key: "${CI_JOB_NAME}"
      paths:
        - .sonar/cache
    script:
      - echo "SonarQube test backend for ${CI_PROJECT_DIR}"
      - sonar-scanner
        -Dsonar.qualitygate.wait=true
        -Dsonar.projectKey=${SONAR_PROJECTKEY_BACKEND}
        -Dsonar.sources=.
        -Dsonar.host.url=${SONAR_HOST_URL}
        -Dsonar.login=${SONAR_LOGIN}
        -Dsonar.projectBaseDir="${CI_PROJECT_DIR}"/backend
        -Dsonar.java.binaries=**/*
        -Dsonar.language=java
    allow_failure: true
    only:
      - merge_requests
      - master
      - develop

upload-release:
    stage: release
    script: 
      - cd backend
      - mvn -s settings.xml deploy -DskipTests -Dversion.application=${VERSION}
      - cd ..
        
deploy:
    stage: deploy
    before_script:
      # устанавливаем ssh-agent для удобства аутентификации по ssh
      - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
      - eval $(ssh-agent -s)
      # сохраняем сгенеренный ранее приватный ключ для раннера
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
    script:
      - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/
      - ssh ${DEV_USER}@${DEV_HOST}
        "export "VERSION=${VERSION}";
        export "DEV_USER=${DEV_USER}";
        export "NEXUS_REPO_URL=${NEXUS_REPO_URL}";
        export "NEXUS_REPO_USER=${NEXUS_REPO_USER}";
        export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
        /bin/bash -s " < ./backend/deploy.sh
    when: manual
    environment:
        name: deploy

rollback:
    stage: rollback
    before_script:
      # устанавливаем ssh-agent для удобства аутентификации по ssh1
      - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
      - eval $(ssh-agent -s)
      # сохраняем сгенеренный ранее приватный ключ для раннера
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
    script:
      - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/
      - ssh ${DEV_USER}@${DEV_HOST}
        "export "DEV_USER=${DEV_USER}";
        export "NEXUS_REPO_URL=${NEXUS_REPO_URL}";
        export "NEXUS_REPO_USER=${NEXUS_REPO_USER}";
        export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
        /bin/bash -s " < ./backend/rollback.sh
    when: manual
    environment:
        name: deploy
